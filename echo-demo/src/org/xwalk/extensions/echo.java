// Copyright 2014 Intel Corporation. All rights reserved.
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_extension.py. DO NOT MODIFY!

package org.xwalk.extensions;

import android.util.Log;
import org.json.JSONException;
import org.json.JSONObject;

import org.xwalk.app.runtime.extension.XWalkExtensionClient;
import org.xwalk.app.runtime.extension.XWalkExtensionContextClient;

import org.xwalk.extensions.echoImpl;

public class echo extends XWalkExtensionClient {
    final private XWalkExtensionContextClient mExtensionContext;

    private static final String TAG = "echo";
    private static final String CMD_DUMMY = "dummy";
    private static final String CMD_HI = "hi";
    
    public echo(String name, String JsApiContent, XWalkExtensionContextClient context) {
        super(name, JsApiContent, context);
        mExtensionContext = context;
    }

    @Override
    public void onMessage(int instanceId, String message) {
        if (message.isEmpty()) return;
        try {
            JSONObject jsonInput = new JSONObject(message);
            String cmd = jsonInput.getString("cmd");
            JSONObject jsonOutput = null;
            if (false) {}
            else if (cmd.equals(CMD_DUMMY)) {
                // jsonOutput..
            }
            else if (cmd.equals(CMD_HI)) {
                // jsonOutput
            }
            else {
                Log.e(TAG, "Unexpected message received: " + message);
                return;
            }
            if (!jsonOutput.has("cmd")) jsonOutput.put("cmd", cmd);
            jsonOutput.put("asyncCallId", jsonInput.getString("asyncCallId"));
            postMessage(instanceId, jsonOutput.toString());
        } catch (JSONException e) {
            Log.e(TAG, e.toString());
        }
    }
}
