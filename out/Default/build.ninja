cc = gcc
cxx = g++
ld = $cxx
ar = ar
ar_host = ar
cc_host = gcc
cxx_host = g++
ld_host = $cxx_host

pool link_pool
  depth = 1

rule cc
  command = $cc -MMD -MF $out.d $defines $includes $cflags $cflags_c $cflags_pch_c -c $in -o $out
  description = CC $out
  depfile = $out.d
  deps = gcc
rule cc_s
  command = $cc $defines $includes $cflags $cflags_c $cflags_pch_c -c $in -o $out
  description = CC $out
rule cxx
  command = $cxx -MMD -MF $out.d $defines $includes $cflags $cflags_cc $cflags_pch_cc -c $in -o $out
  description = CXX $out
  depfile = $out.d
  deps = gcc
rule alink
  command = rm -f $out && $ar rcs $out $in
  description = AR $out
rule alink_thin
  command = rm -f $out && $ar rcsT $out $in
  description = AR $out
rule solink
  command = if [ ! -e $lib -o ! -e ${lib}.TOC ]; then $ld -shared $ldflags -o $lib -Wl,-soname=$soname $
      -Wl,--whole-archive $in $solibs -Wl,--no-whole-archive $libs && { readelf -d ${lib} | grep SONAME ; nm -gD -f p $
      ${lib} | cut -f1-2 -d' '; } > ${lib}.TOC; else $ld -shared $ldflags -o $lib -Wl,-soname=$soname $
      -Wl,--whole-archive $in $solibs -Wl,--no-whole-archive $libs && { readelf -d ${lib} | grep SONAME ; nm -gD -f p $
      ${lib} | cut -f1-2 -d' '; } > ${lib}.tmp && if ! cmp -s ${lib}.tmp ${lib}.TOC; then mv ${lib}.tmp ${lib}.TOC ; $
      fi; fi
  description = SOLINK $lib
  pool = link_pool
  restat = 1
rule solink_module
  command = if [ ! -e $lib -o ! -e ${lib}.TOC ]; then $ld -shared $ldflags -o $lib -Wl,-soname=$soname $
      -Wl,--start-group $in $solibs -Wl,--end-group $libs && { readelf -d ${lib} | grep SONAME ; nm -gD -f p ${lib} | $
      cut -f1-2 -d' '; } > ${lib}.TOC; else $ld -shared $ldflags -o $lib -Wl,-soname=$soname -Wl,--start-group $in $
      $solibs -Wl,--end-group $libs && { readelf -d ${lib} | grep SONAME ; nm -gD -f p ${lib} | cut -f1-2 -d' '; } > $
      ${lib}.tmp && if ! cmp -s ${lib}.tmp ${lib}.TOC; then mv ${lib}.tmp ${lib}.TOC ; fi; fi
  description = SOLINK(module) $lib
  pool = link_pool
  restat = 1
rule link
  command = $ld $ldflags -o $out -Wl,--start-group $in $solibs -Wl,--end-group $libs
  description = LINK $out
  pool = link_pool
rule stamp
  command = ${postbuilds}touch $out
  description = STAMP $out
rule copy
  command = ln -f $in $out 2>/dev/null || (rm -rf $out && cp -af $in $out)
  description = COPY $in $out

subninja obj/build/android/build_output_dirs.ninja
subninja obj/admob/admob.ninja
subninja obj/build_all_android_extensions.ninja

# Short names for targets.
build build_output_dirs: phony ../../build/android
build admob: phony obj/admob/admob.actions_rules_copies.stamp
build build_all_android_extensions: phony obj/admob/admob.actions_rules_copies.stamp

build all: phony ../../build/android obj/admob/admob.actions_rules_copies.stamp
default all
